import sqlite3
import re

class FitnClub:
    def __init__(self):
        self.conn = sqlite3.connect('fitness_club.db')
        self.cursor = self.conn.cursor()

        self.cursor.execute(
            "CREATE TABLE IF NOT EXISTS clients (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER, email TEXT UNIQUE, password TEXT)")
        self.cursor.execute(
            "CREATE TABLE IF NOT EXISTS trainers (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, specialty TEXT)")
        self.cursor.execute(
            "CREATE TABLE IF NOT EXISTS memberships (id INTEGER PRIMARY KEY AUTOINCREMENT, client_id INTEGER, trainer_id INTEGER, start_date TEXT, end_date TEXT)")
        self.cursor.execute(
            "CREATE TABLE IF NOT EXISTS workouts (id INTEGER PRIMARY KEY AUTOINCREMENT, trainer_id INTEGER, client_id INTEGER, date TEXT, duration INTEGER, FOREIGN KEY (trainer_id) REFERENCES trainers(id), FOREIGN KEY (client_id) REFERENCES clients(id))")

        self.conn.commit()

    def add_client(self, name, age, email, password):
        if not self.validate_email(email):
            raise ValueError("Неверный формат электронной почты")
        query = "INSERT INTO clients (name, age, email, password) VALUES (?, ?, ?, ?)"
        self.cursor.execute(query, (name, age, email, password))
        self.conn.commit()

    def add_trainer(self, name, specialty):
        query = "INSERT INTO trainers (name, specialty) VALUES (?, ?)"
        self.cursor.execute(query, (name, specialty))
        self.conn.commit()

    def add_membership(self, client_id, trainer_id, start_date, end_date):
        query = "INSERT INTO memberships (client_id, trainer_id, start_date, end_date) VALUES (?, ?, ?, ?)"
        self.cursor.execute(query, (client_id, trainer_id, start_date, end_date))
        self.conn.commit()

    def add_workout(self, trainer_id, client_id, date, duration):
        query = "INSERT INTO workouts (trainer_id, client_id, date, duration) VALUES (?, ?, ?, ?)"
        self.cursor.execute(query, (trainer_id, client_id, date, duration))
        self.conn.commit()

    def validate_email(self, email):
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if re.match(pattern, email):
            return True
        else:
            return False

    def register(self, name, age, email, password):
        try:
            self.add_client(name, age, email, password)
            print("Вы успешно зарегистрировались!")
        except sqlite3.IntegrityError:
            print("Произошла ошибка. Пользователь с таким email уже существует.")

    def login(self, email, password):
        query = "SELECT COUNT(*) FROM clients WHERE email = ? AND password = ?"
        self.cursor.execute(query, (email, password))
        result = self.cursor.fetchone()

        if result[0] > 0:
            print("Вы успешно вошли в систему.")
        else:
            print("Неверный email или пароль.")

    def handle_error(self, error):
        print("Произошла ошибка:", error)

db = FitnClub()

try:
    db.register("Ivan Ivanov", 30, "ivanivanov@example.com", "password123")
    db.login("ivanivanov@example.com", "password123")
except Exception as e:
    db.handle_error(e)
